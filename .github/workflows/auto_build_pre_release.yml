#####
# 自動編譯 exe 並發行為 Pre-release
#####
name: Auto Build and Pre-release EXE

on:
  push:
    branches:
      - main

# 權限設置
permissions:
  contents: write
  packages: write
  issues: write
  actions: write

jobs:
  build_release:
    runs-on: windows-latest
    env:
      PYTHON_VERSION: '3.11'
      EXCLUDE_PATTERNS: '' # 需要排除的檔案
      # Nuitka 編譯命令
      NUITKA_CMD: 'nuitka app.py --standalone --show-progress --disable-console --remove-output --noinclude-default-mode=nofollow --windows-icon-from-ico=assets/icon.png --include-data-dir=assets=assets --enable-plugin=pyside6 --include-qt-plugins=sensible --lto=yes -j 20 --output-dir=dev/build'

    steps:
      # ----------------------------
      # 1. 拉取倉庫
      # ----------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 取得完整 commit 歷史

      # ----------------------------
      # 2. 取得版本號
      # ----------------------------
      - name: Get version from Python file
        id: get_version
        shell: pwsh
        run: |
          $version = python -c "import re; print(re.search(r'appVersion\s*=\s*\"([^\"]+)\"', open('src/app_config.py').read()).group(1))"
          echo "version=$version" >> $env:GITHUB_OUTPUT
          Write-Host "Detected version: $version"

      # ----------------------------
      # 3. 設定 Python
      # ----------------------------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # ----------------------------
      # 4. 偵測架構
      # ----------------------------
      - name: Detect architecture
        id: arch
        shell: pwsh
        run: |
          $arch = python -c "import platform; print(platform.architecture()[0])"
          if ($arch -eq "64bit") { $arch="x64" } else { $arch="x86" }
          echo "arch=$arch" >> $env:GITHUB_OUTPUT
          Write-Host "Detected architecture: $arch"

      # ----------------------------
      # 5. 快取 pip
      # ----------------------------
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: $HOME/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml','**/poetry.lock','**/requirements.txt') }}

      # ----------------------------
      # 6. 安裝依賴 (自動偵測 pyproject.toml / pdm / requirements)
      # ----------------------------
      - name: Install dependencies
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          if (Test-Path "poetry.lock" -or (Select-String -Pattern "\[tool.poetry\]" pyproject.toml -Quiet)) {
              python -m pip install --upgrade pip
              python -m pip install poetry
              poetry config virtualenvs.create false --local
              poetry install --no-interaction --no-ansi --only main
          } elseif (Test-Path "pdm.lock" -or (Select-String -Pattern "\[tool.pdm\]" pyproject.toml -Quiet)) {
              python -m pip install --upgrade pip
              python -m pip install pdm
              pdm install --no-edit --prod
          } elseif (Test-Path "requirements.txt") {
              python -m pip install --upgrade pip
              python -m pip install -r requirements.txt
          } else {
              python -m pip install --upgrade pip build
              python -m pip install .
          }

      # ----------------------------
      # 7. 移除指定檔案
      # ----------------------------
      - name: Remove files
        shell: pwsh
        run: |
          if ($env:EXCLUDE_PATTERNS) {
            $patterns = $env:EXCLUDE_PATTERNS -split ';'
            foreach ($p in $patterns) {
                Write-Host "Removing files matching: $p"
                git ls-files $p | ForEach-Object { Remove-Item $_ -Force -ErrorAction SilentlyContinue }
                Remove-Item $p -Recurse -Force -ErrorAction SilentlyContinue
            }
          }

      # ----------------------------
      # 8. 安裝 Nuitka 與必要依賴
      # ----------------------------
      - name: Install Nuitka
        shell: pwsh
        run: |
          python -m pip install nuitka numpy pandas scipy matplotlib

      # ----------------------------
      # 9. 下載並解壓 Dependency Walker
      # ----------------------------
      - name: Download and Extract Dependency Walker
        shell: pwsh
        run: |
          $dw_path = "$env:LOCALAPPDATA\Nuitka\Nuitka\Cache\downloads\depends\x86_64"
          New-Item -ItemType Directory -Force -Path $dw_path
          $zip_file = Join-Path $dw_path "depends22_x64.zip"
          Invoke-WebRequest -Uri "https://www.dependencywalker.com/depends22_x64.zip" -OutFile $zip_file
          Expand-Archive -Path $zip_file -DestinationPath $dw_path -Force

      # ----------------------------
      # 10. 編譯 EXE
      # ----------------------------
      - name: Build exe with Nuitka
        shell: cmd
        run: ${{ env.NUITKA_CMD }}

      # ----------------------------
      # 11. 封裝為 ZIP
      # ----------------------------
      - name: Zip output
        id: zip_file
        shell: pwsh
        run: |
          $file_name = "onee_meta_${{ steps.get_version.outputs.version }}_auto-${{ steps.arch.outputs.arch }}"
          echo "file_name=$file_name" >> $env:GITHUB_OUTPUT
          Compress-Archive -Path "dev/build/app.dist/*" -DestinationPath "$file_name.zip" -Force

      # ----------------------------
      # 12. 上傳 artifact
      # ----------------------------
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.zip_file.outputs.file_name }}
          path: ${{ steps.zip_file.outputs.file_name }}.zip

      # ----------------------------
      # 13. 收集 commit 訊息
      # ----------------------------
      - name: Collect commit logs since last release
        id: changelog
        shell: pwsh
        run: |
          $last_tag = git describe --tags --abbrev=0 2>$null
          if (-not $last_tag) { $last_tag="" }
          Write-Host "Last tag: $last_tag"
          if (-not $last_tag) {
            git log --pretty=format:"- %s (%h)" > commits.txt
          } else {
            git log "$last_tag..HEAD" --pretty=format:"- %s (%h)" > commits.txt
          }
          $changelog = Get-Content commits.txt | Out-String
          echo "changelog<<EOF" >> $env:GITHUB_OUTPUT
          echo $changelog >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      # ----------------------------
      # 14. 建立 Release
      # ----------------------------
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}_Auto
          name: "Version ${{ steps.get_version.outputs.version }} Auto"
          body: |
            ### 變更內容
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: ${{ steps.zip_file.outputs.file_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

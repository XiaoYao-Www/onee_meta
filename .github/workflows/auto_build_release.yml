#####
# 自動編譯 EXE 並建立 Release（正式版）
#####
name: Auto Build and Release EXE

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  issues: write
  actions: write

jobs:
  build_release:
    runs-on: windows-latest
    env:
      PYTHON_VERSION: '3.11'
      # Nuitka 編譯命令
      NUITKA_CMD: 'nuitka app.py --standalone --show-progress --disable-console --remove-output --noinclude-default-mode=nofollow --windows-icon-from-ico=assets/icon.png --include-data-dir=assets=assets --enable-plugin=pyside6 --include-qt-plugins=sensible --lto=yes -j 20 --output-dir=dev/build'

    steps:
      # ----------------------------
      # 1. 拉取倉庫
      # ----------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ----------------------------
      # 2. 檢查版本號
      # ----------------------------
      - name: Get version from Python file
        id: check_version
        shell: bash
        run: |
          set -e
          # 從 app_config.py 獲取當前版本號
          CURRENT_VERSION=$(python -c 'import re; print(re.search(r"appVersion\s*=\s*\"([^\"]+)\"", open("src/app_config.py", encoding="utf-8").read()).group(1))')
          echo "Current version: $CURRENT_VERSION"

          # 獲取最新標籤
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, proceeding with build."
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            # 從標籤提取版本號（假設標籤格式為 vX.Y.Z_Auto）
            LAST_VERSION=$(echo "$LAST_TAG" | sed 's/^v\(.*\)_Auto$/\1/')
            echo "Last version: $LAST_VERSION"

            # 比較版本號
            if [ "$CURRENT_VERSION" != "$LAST_VERSION" ]; then
              echo "Version changed, proceeding with build."
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              echo "version_changed=true" >> $GITHUB_OUTPUT
            else
              echo "Version unchanged, stopping workflow."
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      # ----------------------------
      # 3. 設定 Python
      # ----------------------------
      - name: Setup Python
        if: steps.check_version.outputs.version_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # ----------------------------
      # 4. 偵測架構
      # ----------------------------
      - name: Detect architecture
        if: steps.check_version.outputs.version_changed == 'true'
        id: arch
        shell: bash
        run: |
          ARCH=$(python -c "import platform; print('x64' if platform.architecture()[0] == '64bit' else 'x86')")
          echo "arch=$ARCH" >> $GITHUB_OUTPUT
          echo "Detected architecture: $ARCH"

      # ----------------------------
      # 5. 快取 pip
      # ----------------------------
      - name: Cache pip
        if: steps.check_version.outputs.version_changed == 'true'
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml','**/poetry.lock','**/requirements.txt') }}

      # ----------------------------
      # 6. 安裝依賴 (自動偵測 pyproject.toml / pdm / requirements)
      # ----------------------------
      - name: Install dependencies
        if: steps.check_version.outputs.version_changed == 'true'
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          if grep -q "\[tool.poetry\]" pyproject.toml 2>/dev/null || [ -f poetry.lock ]; then
            echo "Using Poetry..."
            python -m pip install poetry
            poetry config virtualenvs.create false --local
            poetry install --no-interaction --no-ansi --only main
          elif grep -q "\[tool.pdm\]" pyproject.toml 2>/dev/null || [ -f pdm.lock ]; then
            echo "Using PDM..."
            python -m pip install pdm
            pdm install --no-edit --prod
          elif [ -f requirements.txt ]; then
            echo "Using requirements.txt..."
            python -m pip install -r requirements.txt
          else
            echo "Fallback: install current package"
            python -m pip install .
          fi

      # ----------------------------
      # 7. 安裝 Nuitka 與必要依賴
      # ----------------------------
      - name: Install Nuitka
        if: steps.check_version.outputs.version_changed == 'true'
        shell: bash
        run: |
          python -m pip install nuitka numpy pandas scipy matplotlib

      # ----------------------------
      # 8. 下載並解壓 Dependency Walker
      # ----------------------------
      - name: Download and Extract Dependency Walker
        if: steps.check_version.outputs.version_changed == 'true'
        shell: bash
        run: |
          DW_PATH="$LOCALAPPDATA/Nuitka/Nuitka/Cache/downloads/depends/x86_64"
          mkdir -p "$DW_PATH"
          ZIP_FILE="$DW_PATH/depends22_x64.zip"
          curl -L -o "$ZIP_FILE" "https://www.dependencywalker.com/depends22_x64.zip"
          unzip -o "$ZIP_FILE" -d "$DW_PATH"

      # ----------------------------
      # 9. 編譯 EXE
      # ----------------------------
      - name: Build exe with Nuitka
        if: steps.check_version.outputs.version_changed == 'true'
        shell: bash
        run: |
          echo "Running Nuitka build..."
          eval "python -m ${NUITKA_CMD}"

      # ----------------------------
      # 10. 封裝為 ZIP
      # ----------------------------
      - name: Zip output
        if: steps.check_version.outputs.version_changed == 'true'
        id: zip_file
        shell: bash
        run: |
          FILE_NAME="onee_meta_${{ steps.check_version.outputs.version }}_auto-${{ steps.arch.outputs.arch }}"
          echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
          powershell Compress-Archive -Path "dev/build/app.dist/*" -DestinationPath "$FILE_NAME.zip" -Force
          echo "Created ZIP: $FILE_NAME.zip"

      # ----------------------------
      # 11. 上傳 artifact
      # ----------------------------
      - name: Upload artifact
        if: steps.check_version.outputs.version_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.zip_file.outputs.file_name }}
          path: ${{ steps.zip_file.outputs.file_name }}.zip

      # ----------------------------
      # 12. 收集 commit 訊息
      # ----------------------------
      - name: Collect commit logs since last release
        if: steps.check_version.outputs.version_changed == 'true'
        id: changelog
        shell: bash
        run: |
          set -e
          export LC_ALL=C.UTF-8
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "") # 獲取最新標籤
          if [ -z "$LAST_TAG" ]; then # 生成提交日誌
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" | tr -d '\r')
          else
            CHANGELOG=$(git log "$LAST_TAG"..HEAD --pretty=format:"- %s (%h)" | tr -d '\r')
          fi
          if [ -z "$CHANGELOG" ]; then # 檢查是否為空
            CHANGELOG="無變更內容"
          fi
          # 將日誌寫入 GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # ----------------------------
      # 13. 建立 Release（正式版）
      # ----------------------------
      - name: Create Release
        if: steps.check_version.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.check_version.outputs.version }}_Auto
          name: "Version ${{ steps.check_version.outputs.version }} Auto"
          body: |
            ### 變更內容
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: ${{ steps.zip_file.outputs.file_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
